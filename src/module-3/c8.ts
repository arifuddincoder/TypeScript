{
	// 1. **What is Polymorphism? Explain it with an example (e.g., Person, Shape).**
	//    ЁЯФ╣ **Polymorphism ржХрзА? Person ржмрж╛ Shape-ржПрж░ ржорждрзЛ ржЙржжрж╛рж╣рж░ржг ржжрж┐рзЯрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзЛред**

	class Person {
		getSleep(): string {
			return `I am sleeping 8 hours per day.`;
		}
	}

	class Student extends Person {
		getSleep(): string {
			return `I am sleeping 7 hours per day.`;
		}
	}

	class Developer extends Person {
		getSleep(): string {
			return `I am sleeping 6 hours per day.`;
		}
	}

	const getSleepingHour = (param: Person) => {
		return param.getSleep();
	};

	const person1 = new Person();
	const student1 = new Student();
	const developer1 = new Developer();

	console.log(getSleepingHour(person1));
	console.log(getSleepingHour(student1));
	console.log(getSleepingHour(developer1));

	class Shape {
		area(): number {
			return 0;
		}
	}

	class Circle extends Shape {
		public radius: number;
		constructor(radius: number) {
			super();
			this.radius = radius;
		}
		area(): number {
			return 3.1416 * this.radius * this.radius;
		}
	}

	class Rectangle extends Shape {
		width: number;
		height: number;

		constructor(width: number, height: number) {
			super();
			this.width = width;
			this.height = height;
		}

		area(): number {
			return this.width * this.height;
		}
	}

	const shapeArea = (param: Shape): number => {
		return param.area();
	};

	const shape1 = new Shape();
	const circle1 = new Circle(1);
	const rectangle = new Rectangle(5, 5);

	console.log(shapeArea(circle1));
}
{
	//   тЬи English Explanation
	// Polymorphism means тАЬmany forms.тАЭ
	// In OOP, polymorphism allows different classes (that inherit from the same parent) to provide different implementations of the same method.
	// Example above:
	// All classes have a draw() method.
	// But Shape, Circle, and Rectangle each implement it differently.
	// When we call render(shape), the correct method is chosen at runtime тЖТ this is runtime polymorphism.
	// тЬи ржмрж╛ржВрж▓рж╛ ржмрзНржпрж╛ржЦрзНржпрж╛
	// Polymorphism ржорж╛ржирзЗ рж╣рж▓рзЛ тАЬржЕржирзЗржХ рж░рзВржктАЭред
	// OOP-ржП ржПржЯрж┐ ржПржоржи ржПржХржЯрж┐ ржзрж╛рж░ржгрж╛ ржпрзЗржЦрж╛ржирзЗ ржПржХржЗ ржирж╛ржорзЗрж░ method ржмрж┐ржнрж┐ржирзНржи ржХрзНрж▓рж╛рж╕рзЗ ржнрж┐ржирзНржи ржнрж┐ржирзНржиржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред
	// ржЙржкрж░рзЗрж░ ржЙржжрж╛рж╣рж░ржгрзЗ:
	// Shape, Circle, RectangleтАФрж╕ржмрж╛рж░ржЗ draw() method ржЖржЫрзЗред
	// ржХрж┐ржирзНрждрзБ ржкрзНрж░рждрзНржпрзЗржХрзЗ ржЖрж▓рж╛ржжрж╛ рж░ржХржо ржЖржЙржЯржкрзБржЯ ржжрзЗрзЯред
	// ржпржЦржи ржЖржорж░рж╛ render() ржлрж╛ржВрж╢ржирзЗ ржпрзЗ ржЕржмржЬрзЗржХрзНржЯ ржкрж╛ржарж╛ржЗ, рждрж╛рж░ ржУржкрж░ ржирж┐рж░рзНржнрж░ ржХрж░рзЗ ржХрзЛржи draw() ржХрж▓ рж╣ржмрзЗ рждрж╛ ржарж┐ржХ рж╣рзЯ тЖТ ржПржХрзЗ ржмрж▓рзЗ runtime polymorphismред
}
