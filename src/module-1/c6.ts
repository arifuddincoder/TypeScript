{
	//  ** 1. How do you write a normal function and an arrow function in TypeScript?**
	//    ЁЯУШ _ржмрж╛ржВрж▓рж╛рзЯ: TypeScript-ржП рж╕рж╛ржзрж╛рж░ржг ржлрж╛ржВрж╢ржи ржПржмржВ ржЕрзНржпрж╛рж░рзЛ ржлрж╛ржВрж╢ржи ржХрзАржнрж╛ржмрзЗ рж▓рзЗржЦрж╛ рж╣рзЯ?_

	//TypeScript-ржП ржлрж╛ржВрж╢ржи рж▓рзЗржЦрж╛рж░ рж╕ржорзЯ ржЖржкржирж╛ржХрзЗ ржЯрж╛ржЗржк ржбрж┐ржХрзНрж▓рзЗрзЯрж╛рж░ ржХрж░рждрзЗ рж╣рзЯ (ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржУ рж░рж┐ржЯрж╛рж░рзНржи ржЯрж╛ржЗржк)ред

	function add(a: number, b: number): number {
		return a + b;
	}

	console.log(add(5, 3)); // Output: 8

	const multiply = (x: number, y: number): number => {
		return x * y;
	};

	console.log(multiply(4, 2)); // Output: 8

	// ** 2. How do you explicitly declare the return type of a function in TypeScript?**
	//  ЁЯУШ _ржмрж╛ржВрж▓рж╛рзЯ: TypeScript-ржП ржХрзЛржирзЛ ржлрж╛ржВрж╢ржирзЗрж░ рж░рж┐ржЯрж╛рж░рзНржи ржЯрж╛ржЗржк ржХрзАржнрж╛ржмрзЗ рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ (explicitly) ржШрзЛрж╖ржгрж╛ ржХрж░ржмрзЗржи?

	//TypeScript-ржП ржХрзЛржирзЛ ржлрж╛ржВрж╢ржирзЗрж░ return type рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ (explicitly) ржШрзЛрж╖ржгрж╛ ржХрж░рждрзЗ рж╣рж▓рзЗ, ржлрж╛ржВрж╢ржирзЗрж░ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ рж▓рж┐рж╕рзНржЯрзЗрж░ ржкрж░рзЗ : ржжрж┐рзЯрзЗ ржЯрж╛ржЗржк рж▓рж┐ржЦрждрзЗ рж╣рзЯред
	// ржлрж╛ржВрж╢ржиржЯрж┐ number рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ
	function add(a: number, b: number): number {
		return a + b;
	}

	// ржлрж╛ржВрж╢ржиржЯрж┐ string рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ
	function greet(name: string): string {
		return `Hello, ${name}!`;
	}

	// ржлрж╛ржВрж╢ржиржЯрж┐ ржХрж┐ржЫрзБржЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржЫрзЗ ржирж╛ (void)
	function logMessage(message: string): void {
		console.log(message);
	}
}
