{
	// **What is the difference between Implicit and Explicit Type Hinting in TypeScript?**

	//TypeScript ржирж┐ржЬрзЗржЗ ржЯрж╛ржЗржк ржЕржирзБржорж╛ржи ржХрж░рзЗ ржирзЗрзЯ (Type Inference) ржпржЦржи рждрзБржорж┐ ржЯрж╛ржЗржк ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзЛ ржирж╛ред
	let nameImp = "Arif"; // TypeScript ржмрзБржЭрзЗ ржирж┐рзЯрзЗржЫрзЗ ржПржЯрж┐ string ржЯрж╛ржЗржк
	let ageImp = 25; // ржПржЯрж┐ number ржЯрж╛ржЗржк

	// рждрзБржорж┐ рж╕рж░рж╛рж╕рж░рж┐ ржЯрж╛ржЗржк ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзЛ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржмрж╛ ржлрж╛ржВрж╢ржирзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗред
	let nameExp: string = "Arif";
	let ageExp: number = 25;

	// **What is Optional Type Hinting in TypeScript? Describe with examples.**
	//Optional Type Hinting ржорж╛ржирзЗ рж╣рж▓рзЛ тАУ TypeScript ржП ржХрзЛржи ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ ржмрж╛ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржЖржмрж╢рзНржпржХ ржирзЯ (optional), ржЕрж░рзНржерж╛рзО рж╕рзЗржЯрж┐ ржерж╛ржХрждрзЗржУ ржкрж╛рж░рзЗ, ржирж╛-ржУ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗред

	interface User {
		name: string;
		email?: string; // Optional
	}

	const user1: User = { name: "Arif" }; // тЬЕ Valid
	const user2: User = { name: "Rafi", email: "rafi@gmail.com" }; // тЬЕ Valid

	function greet(name: string, age?: number): string {
		if (age !== undefined) {
			return `Hello, ${name}. You are ${age} years old.`;
		}
		return `Hello, ${name}.`;
	}

	console.log(greet("Arif")); // тЬЕ Hello, Arif.
	console.log(greet("Arif", 25)); // тЬЕ Hello, Arif. You are 25 years old.

	// **What are Literal Types in TypeScript? Explain with examples.**
	//Literal Type рж╣рж▓рзЛ ржПржоржи ржПржХ ржзрж░ржирзЗрж░ ржЯрж╛ржЗржк ржпрзЗржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржПржХржЯрж┐ ржорж╛ржи ржХрзЗржмрж▓ржорж╛рждрзНрж░ ржЧрзНрж░рж╣ржг ржХрж░рждрзЗ ржкрж╛рж░рзЗред

	let theme: "dark" | "light";

	theme = "dark"; // тЬЕ Valid
	theme = "light"; // тЬЕ Valid
	theme = "blue"; // тЭМ Error: 'blue' is not assignable

	//**Why you should not use implicit data types / optional data hinting?**
	//TypeScript ржХржЦржирзЛ ржХржЦржирзЛ ржнрзБрж▓ ржЯрж╛ржЗржк ржзрж░рзЗ ржирж┐рждрзЗ ржкрж╛рж░рзЗ
	//ржХрзЛржбрзЗ ржЯрж╛ржЗржк ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж▓рзЗ ржЖржЧрзЗрж░ ржЗржиржлрж╛рж░рзЗржирзНрж╕ ржнрзБрж▓ рж╣рзЯрзЗ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ
	//ржХрзЛржи ржЯрж╛ржЗржкрзЗ ржмрж╛ржЧ рж╣ржЪрзНржЫрзЗ рждрж╛ ржзрж░рж╛ ржХржарж┐ржи рж╣рзЯ
	//ржЕржирзНржп ржбрзЗржнрзЗрж▓ржкрж╛рж░ ржмрзБржЭржмрзЗ ржирж╛ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржЖрж╕рж▓рзЗ ржХрзА ржЯрж╛ржЗржкрзЗрж░

	//**How to write array in TypeScript for strings array and for numbers?**
	// ЁЯФ╣ TypeScript ржП String ржУ Number Array рж▓рзЗржЦрж╛рж░ ржкржжрзНржзрждрж┐
	// TypeScript ржП array ржЯрж╛ржЗржк ржХрж░рж╛рж░ ржжрзБржЯрж┐ рж╕рж╛ржзрж╛рж░ржг ржЙржкрж╛рзЯ ржЖржЫрзЗред

	// ржкржжрзНржзрждрж┐ рзз: string[]
	let fruits: string[] = ["apple", "banana", "mango"];

	// ржкржжрзНржзрждрж┐ рзи: Array<string>
	let colors: Array<string> = ["red", "green", "blue"];

	// ржкржжрзНржзрждрж┐ рзз: number[]
	let scores: number[] = [90, 85, 100];

	// ржкржжрзНржзрждрж┐ рзи: Array<number>
	let ids: Array<number> = [1, 2, 3, 4];

	//6. **Can you explain what a Tuple is in TypeScript, and how it differs from a regular array?**
	//Tuple рж╣ржЪрзНржЫрзЗ TypeScript-ржПрж░ ржПржХ ржзрж░ржирзЗрж░ ржмрж┐рж╢рзЗрж╖ array ржпрзЗржЦрж╛ржирзЗ:

	// ржЙржкрж╛ржжрж╛ржирзЗрж░ рж╕ржВржЦрзНржпрж╛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ (fixed length)

	// ржкрзНрж░рждрж┐ржЯрж┐ ржЕржмрж╕рзНржерж╛ржирзЗрж░ (index) ржбрзЗржЯрж╛ржЯрж╛ржЗржк ржЖржЧрзЗ ржерзЗржХрзЗ ржирж┐рж░рзНржзрж╛рж░рж┐ржд
	//ржЕрж░рзНржерж╛рзО, ржПржХржЯрж╛ tuple ржмрж╛ржирж╛рж▓рзЗ рждрж╛рж░ length ржУ ржкрзНрж░рждрж┐ржЯрж┐ index-ржП ржХрзЛржи type ржерж╛ржХржмрзЗ, рж╕рзЗржЯрж╛ рж╢рзБрж░рзБрждрзЗржЗ ржарж┐ржХ ржХрж░рзЗ ржжрж┐рждрзЗ рж╣рзЯред

	let user: [string, number];
	user = ["Arif", 25]; // тЬЕ рж╕ржарж┐ржХ
	// user = [25, "Arif"]; // тЭМ ржнрзБрж▓, ржХрж╛рж░ржг ржЯрж╛ржЗржк ржорж┐рж▓рзЗ ржирж╛ржЗ

	let numbers: number[] = [1, 2, 3, 4]; // рж╕ржм number
	let mixed: (string | number)[] = ["Arif", 25, "Developer", 100]; // mixed
}
